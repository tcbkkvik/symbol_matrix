package comp.torcb.algebra.misc;

import comp.torcb.algebra.matrix.Quaternion;
import comp.torcb.algebra.matrix.SymExpression;
import comp.torcb.algebra.matrix.SymMatrix;
import comp.torcb.algebra.matrix.Symbol;

import java.util.HashSet;
import java.util.Set;


public class SymMatrixCodeGen {
    public static String toNumSource(SymMatrix sm) {
        final var _inputArgs = new StringBuilder();
        final var _assignments = new StringBuilder();
        final var _outArrays = new StringBuilder();
        class Builder {
            final Set<String> symbolSet = new HashSet<>();
            final Set<Character> charSet = new HashSet<>();
            int row, col;

            void addCell(SymExpression exp) {
                if (++col == 1) {
                    if (row > 0) _outArrays.append(",\n        ");
                    _outArrays.append("{");
                } else {
                    _outArrays.append(", ");
                }
                for (Symbol sy : exp.symbols()) {
                    String sBody = sy.getBody();
                    if (symbolSet.add(sBody)) {
                        _assignments.append("    double ").append(sBody).append(" = ");
                        int no = 0;
                        for (char ch : sBody.toCharArray()) {
                            if (++no > 1) _assignments.append(" * ");
                            _assignments.append(ch);
                            if (charSet.add(ch)) {
                                if (!_inputArgs.isEmpty()) _inputArgs.append(", ");
                                _inputArgs.append("double ").append(ch);
                            }
                        }
                        _assignments.append(";\n");
                    }
                    _outArrays.append(sy.getNum() < 0 ? "-" : "+");
                    double abs = Math.abs(sy.getNum());
                    if (abs != 1.0) _outArrays.append(abs).append("*");
                    _outArrays.append(sBody);
                }
            }

            void endRow() {
                ++row;
                col = 0;
                _outArrays.append("}");
            }
        }
        var builder = new Builder();
        for (var row : sm.getMatrix()) {
            for (SymExpression exp : row) builder.addCell(exp);
            builder.endRow();
        }
        return "public static double[][] calc(" + _inputArgs + ") {\n" +
               "    //Generated by " + SymMatrixCodeGen.class.getSimpleName() + ".toNumSource\n"
               + _assignments +
               "    return new double[][] {\n" +
               "        " + _outArrays + "\n" +
               "    };\n" +
               "}\n";

    }

    public static void main(String[] args) {
        String srcJava = toNumSource(Quaternion.symRotationMatrix());
        System.out.println(srcJava);
    }
}
